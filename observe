#!/bin/bash 
# SAND observation script. The script need the $homed/public_html/cgi-bin/observation_list file
# as an input see the online documentation for setting this file
# 
# http://cegepsherbrooke.qc.ca/~aubema/index.php/Prof/SandcontrolEn
#
#
# Usage: observe [-m value] [-a value] [-l value] [-i value] [-d value]
# -m is the mount mode flag. If you do not have a mount or just do not want
#    and displacement set value to off otherwise set it to on
# -a is the "beginning at" flag. value may be sun for sunset, ast for astronomical 
#    twilight or any time H:M 
# -l is the loop flag. value give the number of consecutive observing night. 0 = infinity
# -i is the instrument flag. value could be sp for spectrometer, ph for photometer or ra for radiometer
# -d begin after given delay and stopping before the same delay
# -t force a cooling Temperature in Kelvin otherwise the system will determine 
#    the cooling temp with ambiant temp minus cooldif. Must be a positive integer value.
# -o only one sequence (i.e. observe only once the observation_list) this option need to be the last
#
# If you want to operate in mount mode off, begin at sunset, with the spectrometer and 
# for every night until the end of the world just type "observe"
# 
# 
#    Copyright (C) 2010  Martin Aube
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Contact: martin.aube@cegepsherbrooke.qc.ca
#
# ===========================
# home directory
homed=$HOME
# activate gps option 0=off 1=on
gpsf=0
# default luminosity 
# if this value remains unchanged, the webcam is down
lumino=512
# webcam darkness threshold
grep darkness_threshold $homed/localconfig > obs.tmp
read bidon darkness bidon < obs.tmp
echo "Threshold darkness level=" $darkness
grep cammodel1 $homed/localconfig > obs.tmp
read bidon cam1 bidon < obs.tmp
if [ $cam1 = "none" ]
   then darkness=513         # is no camera is installed to monitor ambient brightness then the system will consider the ambien light as very low
fi
# refresh delay between 2 webcam acquisition (be shure to be equal to delai given by crontab -l
delaym=15
# set ghost image flush time (sec)
# we recommand ghosttime=270
ghosttime=270
# an estimate of the moving time for LXD-75
movetime=180
# an estimate of the moving time for PT785S+Pololu
movetime2=20
# an estimate of image download time
downltime=4
# cooling temperature differential
cooldif=25
#
      myFile="observation_list"
# ======
# using getopts
#
mflag=  
iflag=
aflag=
lflag=
dflag=
oflag=
tflag=
mval="off"  # set to static mode by default
ival="sp" # set instrument to spectrometer by default
lval=0    # set the number of observation night to infinity by default
aval="sun" # set the automatic observation beginning time a sunset
dval=0  # delay beginning and end to reduce the night duration (minutes)
# -a for 'at" possible values ast = astronomical twilight sun = sunset H:M = hour and minutes
# determining mount model
grep mountmodel $homed/localconfig > $homed/public_html/cgi-bin/ligne.tmp
read bidon mountmodel bidon < $homed/public_html/cgi-bin/ligne.tmp
while getopts 'm:i:a:l:d:t:o' OPTION
do
  case $OPTION in
    m)  mflag=1
        mval="$OPTARG"
        if [ $mval != "off" ]  
        then if [ $mval != "on" ]
             then echo "Unsupported mode: valid choices are off or on"
                  echo "                  off = without mount on = with mount"
                  exit 1
             fi
        fi
    ;;
    i)  iflag=1
        ival="$OPTARG"
        if [ $ival != "sp" ]  
        then if [ $ival != "ph" ]
             then if [ $ival != "ra" ]
                  then echo "Unsupported instrument: valid choices are sp, ph, ra"
                       echo "                        sp = spectrometer, ph = photometer, ra=radiometer"
                      exit 1
                  fi
             fi
        fi
    ;;
    a)  aflag=1
        aval="$OPTARG"  # accepted values at or ss for astronomical twilight of sunset
    ;;
    l)  lflag=1
        lval="$OPTARG"
    ;;
    d)  dflag=1
        dval="$OPTARG"
    ;;
    o)  oflag=1
    ;;
    t)  tflag=1
        tval="$OPTARG"
    ;;
    ?)  printf "Usage: %s: [-m value] [-a value] [-l value] [-i value] [-d value] [-t value] [-o ] args\n" $(basename $0) >&2
        exit 2
    ;;
  esac
done
# min delay on startup = 30 min in the case of sunset to allow the time for cooling and scan filters during twilight
if [ $aval == "sun" ]
then if [ $dval -lt 45 ]
     then let dval=40
          echo "Setting delay to ist minimum value in sunset mode (45 min)"
     fi
fi












shift $(($OPTIND - 1))
echo "Starting observation with:"
echo "   mount mode =" $mval " (off = mount off, on = mount on)"
echo "   instrument =" $ival " (sp = spectrometer, ra = 5 filters wheel radiometer, ph = 12 filter wheel photometer)"
echo "   begin night at" $aval "+ " $dval" min (sun = sunset, ast = astronomical twilight, H:M = other time)" 
echo "   Number of nights =" $lval " (0 = infinity)"
# checking if there is an instance of observe already running
ninstance=`ps -A | grep -c observe`
let ninstance=ninstance-1
if [ $ninstance -gt 1 ] 
then echo "ERROR! No more than one instance of observe can run!"
     echo "Exiting the script."
     exit 0
fi
# be sure you are not root
qui=`whoami | grep -c root`
if [ $qui -gt 0 ] 
then echo "ERROR! Attempt to run observe as root!"
     echo "Be sure to launch observe as sand."
     echo "Exiting the script."
     exit 1
fi
# ======
chmod -R u+rwx $homed/public_html/cgi-bin
nl=0
let delay=delaym*60
if [ $lval -eq 0 ] 
   then echo "Entering the never ending loop!"
        nl=-1
fi
while [ $nl -lt  $lval ]
do let nl=nl+1
   if [ $lval -eq 0 ] 
   then  nl=-1
#
#  Neverending loop if lval=0
#
   fi
#
#  searching for gps port
#
   if [ $gpsf -eq 1 ] 
   then echo "GPS mode activated"
        if [ `ls /dev | grep ttyUSB0`  ] 
        then echo "GPS look present." 
#
#            reading 10 gps transactions
#
             /bin/echo "Waiting 5 sec for GPS reading..."
             /usr/bin/gpspipe -w -n 10 > $homed/public_html/cgi-bin/coords.tmp
             /usr/bin/tail -1 $homed/public_html/cgi-bin/coords.tmp > $homed/public_html/cgi-bin/bidon.tmp
             /bin/rm -f $homed/public_html/cgi-bin/coords.tmp
             read bidon bidon bidon lat lon altitude bidon1 < $homed/public_html/cgi-bin/bidon.tmp
             if [ "${bidon1:0:1}" != "" ]
             then /bin/echo "GPS is connected, reading lat lon data."
                  lon=`/bin/echo $lon"/-1" |/bin/bc -l`
                  DD=`/bin/echo "scale=0;"$lon"/1" |/usr/bin/bc -l`
                  dd=`/bin/echo "scale=0;"$lat"/1" |/usr/bin/bc -l`
                  MMM=`/bin/echo "("$lon"-"$DD")*60" |/usr/bin/bc -l`
                  MM=${MMM:0:2}
                  mmm=`/bin/echo "("$lat"-"$dd")*60" |/usr/bin/bc -l`
                  mm=${mmm:0:2}
                  SSS=`/bin/echo "(("$lon"-"$DD")-"$MM"/60)*3600" |/usr/bin/bc -l`
                  SS=${SSS:0:2}
                  sss=`/bin/echo "(("$lat"-"$dd")-"$mm"/60)*3600" |/usr/bin/bc -l`
                  ss=${sss:0:2}
                  /bin/echo "GPS give Latitude:" $dd $mm $ss ", Longitude:" $DD $MM $SS "and Altitude:" $altitude
             else /bin/echo "GPS not working: using coords. from localconfig"
                  /bin/echo "Latitude:" $dd $mm $ss ", Longitude:" $DD $MM $SS
             fi    
        else /bin/echo "GPS not present: using coords. from localconfig"
             /bin/echo "Latitude:" $dd $mm $ss ", Longitude:" $DD $MM $SS
        fi
   else  echo "GPS mode off"
   fi
   /bin/grep "Site_name" $homed/localconfig > $homed/public_html/cgi-bin/ligne.tmp
   read bidon NAME bidon < $homed/public_html/cgi-bin/ligne.tmp
#
#  reading longitude and latitude from observation schedule
#
   if [ `grep -c " " $homed/public_html/cgi-bin/$myFile` -ne 0 ]
   then /bin/grep Longitude $homed/localconfig > $homed/public_html/cgi-bin/ligne.tmp
        read bidon DD MM SS bidon < $homed/public_html/cgi-bin/ligne.tmp
        /bin/grep Latitude $homed/localconfig > $homed/public_html/cgi-bin/ligne.tmp
        read bidon dd mm ss bidon < $homed/public_html/cgi-bin/ligne.tmp
   else 
        echo "Please put something in $homed/public_html/cgi-bin/observation_list and restart observe."
        if [ $ival = "sp" ] || [ $ival = "ra" ] ; then
           /usr/local/bin/night_temperature set -off
        fi
        exit 1
   fi

#
#  computing ephemerides
#
   /usr/local/bin/ephems $DD $MM $SS $dd $mm $ss $NAME
   /usr/local/bin/ephems $DD $MM $SS $dd $mm $ss $NAME > $homed/public_html/cgi-bin/last_ephemerides
   if [ $aval = "ast" ]
   then /bin/grep "Evening astronomical twilight" $homed/public_html/cgi-bin/last_ephemerides > $homed/public_html/cgi-bin/toto.tmp
        read bidon bidon bidon  hour min bidon < $homed/public_html/cgi-bin/toto.tmp
        /bin/grep  "Morning astronomical twilight" $homed/public_html/cgi-bin/last_ephemerides > $homed/public_html/cgi-bin/toto.tmp
        read bidon bidon bidon  fhour fmin bidon < $homed/public_html/cgi-bin/toto.tmp
   elif [ $aval = "sun" ]
   then /bin/grep "Sunset" $homed/public_html/cgi-bin/last_ephemerides > $homed/public_html/cgi-bin/toto.tmp
        read bidon bidon bidon bidon bidon hour min bidon < $homed/public_html/cgi-bin/toto.tmp
        /bin/grep  "Sunrise" $homed/public_html/cgi-bin/last_ephemerides > $homed/public_html/cgi-bin/toto.tmp
        read bidon fhour fmin bidon < $homed/public_html/cgi-bin/toto.tmp
   else
        echo $aval | sed 's/:/ /g' > $homed/public_html/cgi-bin/toto.tmp
        read hour min < $homed/public_html/cgi-bin/toto.tmp  
        /bin/grep  "Sunrise" $homed/public_html/cgi-bin/last_ephemerides > $homed/public_html/cgi-bin/toto.tmp
        read bidon fhour fmin bidon < $homed/public_html/cgi-bin/toto.tmp
   fi
   /bin/rm -f $homed/public_html/cgi-bin/toto.tmp
#  finding time of sunset
   /bin/grep "Sunset" $homed/public_html/cgi-bin/last_ephemerides > $homed/public_html/cgi-bin/toto.tmp
   read bidon bidon bidon bidon bidon sshour ssmin bidon < $homed/public_html/cgi-bin/toto.tmp
   ty=`/bin/date +%Y`
   tmo=`/bin/date +%m`
   tj=`/bin/date +%d`
   tm=$ssmin
   th=$sshour
   ts=0
   actsec=`/bin/date +%s`
   actdate=`/bin/date`
   /bin/echo "/bin/date --date='"$ty-$tmo-$tj $th:$tm:$ts"' +%s" > $homed/public_html/cgi-bin/toto.bash
   sunset=`/bin/bash $homed/public_html/cgi-bin/toto.bash`
#  adding 5 min to sunset
   let sunset=sunset+300
#  waiting until 5 min after sunset
   if [ $sunset -lt $actsec ]
#  meaning that sunset is after midnight while we are before midnight
#  adding 24h to sunset as a first approximation
   then let sunset=sunset+86400
   fi
   let dsec=sunset-actsec

   if [ "$dsec" -lt 0 ]
   then /bin/echo "Sunset is in the past (dsec=" $dsec ")"
        /bin/echo "Exiting observe"
        exit 0
   fi
   if [ "$dsec" -gt 43200 ]
   then /bin/echo "Sunset far in time (>12h)! Cannot perform the filter scan at sunset, trying to do it right now. "
        if [ "$dsec" -gt 86400 ]
        then /bin/echo "Sunset in more than 24h from now! Please start it tomorrow."
             /bin/echo "Exiting observe"
             exit 0
        fi
        let dsec=0
   fi
#
#  Wait for beginning of observation sequence
#
   let sleeprem=dsec
   while  [ $sleeprem -gt  0 ]
   do let sleephr=sleeprem/60/60
      let sleepmin=(sleeprem-sleephr*60*60)/60
      /bin/echo "Sleeping for " $sleeprem " sec (" $sleephr "h " $sleepmin "m ) until 5 min after sunset"
      let sleeprem=sleeprem-60
      /bin/sleep 60
   done
#
#  case with ccd cameras
#
   if [ $ival = "sp" ] || [ $ival = "ra" ] ; then
      airt=`/usr/local/bin/night_temperature get -t`
#
#     observation list file name
#

      if [ ! -f $homed/public_html/cgi-bin/$myFile ]
      then /bin/cp $homed/hg/sand/cgi-bin/observation_list $homed/public_html/cgi-bin/
           /bin/echo "Retrieving original observation_list"
      fi
#
#     set CCD temperature
#
      /usr/local/bin/night_temperature get -t > $homed/public_html/cgi-bin/ccdt.tmp
      read ccdt < $homed/public_html/cgi-bin/ccdt.tmp 
      /bin/echo "Initial CCD temperature=" $ccdt
      if [ ! $tval ]
      then echo "Cooling: Using thermal differential mode"
#
#          Cooling temperature differential
#
           stmp=`/bin/echo "scale=0;("$airt"-"$cooldif")/1" |/usr/bin/bc -l`
      else echo "Cooling temperature in manual mode" $tflag $tval
           let stmp=tval-273
      fi
#
#     rounding temperature to nearest 5 C
#
      let stmp="$stmp"/5*5
      largeur=${#stmp}
      /usr/local/bin/night_temperature set -t $stmp
      /bin/echo "Waiting while cooling CCD to "$stmp" C..."
      let count=0
      while [ "${ccdt:0:$largeur}" != $stmp -a $count -ne 360 ]  
      do /usr/local/bin/night_temperature get -t > $homed/public_html/cgi-bin/ccdt.tmp
         read ccdt < $homed/public_html/cgi-bin/ccdt.tmp
         ccdp=`/usr/local/bin/night_temperature get -r`
         /bin/echo "t="$count" s, T="$ccdt" C, Power="$ccdp"%, Target T="$stmp" C"
         /bin/sleep 5 
         let count="$count"+5
      done
      /bin/echo "CCD temperature is ok"
   elif [ $ival = "ph" ]
#  scan the photometer filters
   then nff=0
            while  [ $nff -ne  3 ]
            do  read g1 o1 bidon < $homed/filtersconfig
                bash /usr/local/bin/find_filters.bash
                read g2 o2 bidon < $homed/filtersconfig
                let dg1=g2-g1
                if [ $dg1 -lt 0 ] ; then  let dg1=-1*dg1 ; fi
                let do1=o2-o1
                if [ $do1 -lt 0 ] ; then  let do1=-1*do1 ; fi
                if [ $dg1 -le 4 ] && [ $do1 -le 40 ] ; then
                   echo "Delta_gain="$dg1 " Delta_offset="$do1
                   let gainff=(g1+g2)/2
                   let offsetff=(o1+o2)/2
                   echo $gainff $offsetff > $homed/filtersconfig
                   echo "gain="$gainff " offset="$offsetff
                   let nff=nff+1
                fi
            done 
   fi

#
#  setting beginning time and duration of the night
#

   ty=`/bin/date +%Y`
   tmo=`/bin/date +%m`
   tj=`/bin/date +%d`
   tm=$min
   th=$hour
   ts=0
   actsec=`/bin/date +%s`
   actdate=`/bin/date`
   echo "Time used to compute actsec= " $actdate
   /bin/echo "/bin/date --date='"$ty-$tmo-$tj $th:$tm:$ts"' +%s" > $homed/public_html/cgi-bin/toto.bash
   debsec=`/bin/bash $homed/public_html/cgi-bin/toto.bash`
   tm=$fmin
   th=$fhour
   ts=0
   /bin/echo "/bin/date --date='"$ty-$tmo-$tj $th:$tm:$ts"' +%s" > $homed/public_html/cgi-bin/toto.bash
   finsec=`/bin/bash $homed/public_html/cgi-bin/toto.bash`
   let finsec=finsec-dval*60
   let debsec=debsec+dval*60+30   # plus 30 sec to be sure that the delay between the actsec determination and le calculation of debsec is not yet over.
   if [ $finsec -lt $actsec ]
#  meaning that finsec is after midnight while we are before midnight
#  adding 24h to finsec as a first approximation
   then let finsec=finsec+86400
   fi
   let dsec=debsec-actsec
   if [ $debsec -lt $actsec ] && [ $dsec -lt -43200 ]
#  can be that debsec is after midnight while we are before midnight
#  adding 24h to debsec as a first approximation
   then let debsec=debsec+86400
   else
#     meaning that the night has already begun then start immediately
#     i.e. setting debsec to actsec
      let debsec=actsec
      /bin/echo "Observing date should be in the future!"
      /bin/echo "Starting run almost immediately"
   fi
   if [ $finsec -lt $debsec ]
   then let debsec=debsec-86400
   fi
   let duration=finsec-debsec
   echo "debug:  actsec=" $actsec " duration=" $duration "finsec=" $finsec " debsec=" $debsec
#
#  computing waiting time before beginning of run
#
   let dsec=debsec-actsec
   echo "debug: dsec=" $dsec
   if [ "$dsec" -lt 0 ]
   then /bin/echo "Observation beginning is in the past (dsec=" $dsec ")"
        /bin/echo "Exiting observe"
        exit 0
   fi
   if [ "$dsec" -gt 43200 ]
   then /bin/echo "Observing far in time (>12h)!"
        if [ "$dsec" -gt 86400 ]
        then /bin/echo "Observing in more than 24h from now! Please start is tomorrow."
             /bin/echo "Exiting observe"
             exit 0
        fi
   fi
#
#  Analysing observation list file and creation full night observation sequence
#
   nligne=`/bin/grep -c " " $homed/public_html/cgi-bin/$myFile`
   let nimgtot=nligne-1
   if [ ! $oflag ]
   then rm -f $homed/public_html/cgi-bin/observation_sequence
        echo "Duration of the observing sequence:" $duration "sec" 
        eled=90
        elem=0
        eles=0
        azid=0
        azim=0
        azis=0
        olisttime=0
        nacqui=0
        while [ $olisttime -lt $duration ]
        do # myLine=""
           n=0
           while [ $n -lt  $nligne ]
           do let n=n+1
              let poset=eled*60+elem
              let posat=azid*60+azim
              head -$n $homed/public_html/cgi-bin/$myFile | tail -1 > $homed/public_html/cgi-bin/ligne.tmp
              if [ $n -gt 1 ]
              then read eled elem eles azid azim azis imtyp inttime < $homed/public_html/cgi-bin/ligne.tmp
                   let posea=eled*60+elem+eles
                   let posaa=azid*60+azim+azis
                   if [ $mval = "on" ]
                   then if [ $mountmodel = "PT785S+Pololu" ] ; then movetime=$movetime2 ; fi
                        let olisttime=olisttime+movetime
                   fi
                   let itime=inttime
                   let dtime=downltime
                   if [ $ival = "ra" ]
                   then let 'itime=inttime*(5+1)'
                        let 'dtime=downltime*(5+1)'
                   fi
                   if [ $ival = "ph" ]
                   then let 'itime=10'                     # creating a very long sequence and we will exit it upon end of night
                        let 'dtime=0'
                        let 'ghosttime=0'
                   fi
                   let olisttime=olisttime+dtime+ghosttime
                   if [ $olisttime -lt $duration ]
                   then echo $eled $elem $eles $azid $azim $azis $imtyp $inttime >> $homed/public_html/cgi-bin/observation_sequence
                        let nacqui=nacqui+1
                        let olisttime=olisttime+itime # this allow to complete an image when the end of the observation occur during the last acquisition
                   fi
              fi
           done
        done
        if [ $nimgtot -gt $nacqui ]
        then let ndestroy=nimgtot-nacqui 
             echo "Warning: The last "$ndestroy" images of the observation_list will not be taken "
            echo "         because the night duration is shorter than observation_list "
        fi
   else 
        tail -$nimgtot $homed/public_html/cgi-bin/$myFile > $homed/public_html/cgi-bin/observation_sequence
   fi
   echo "Desired starting time:" $hour":"$min"+"$dval"min" 
#
#  Wait for beginning of observation sequence
#
   let sleeprem=dsec
   while  [ $sleeprem -gt  0 ]
   do let sleephr=sleeprem/60/60
      let sleepmin=(sleeprem-sleephr*60*60)/60
      /bin/echo "Sleeping for " $sleeprem " sec (" $sleephr "h " $sleepmin "m )"
      let sleeprem=sleeprem-60
      /bin/sleep 60
   done
#  read current time
   y=`/bin/date +%Y`
   mo=`/bin/date +%m`
   j=`/bin/date +%d`
   m=`/bin/date +%M`
   h=`/bin/date +%H`
   s=`/bin/date +%S`
#
#  creating current night directory
#
   if [ ! -d "$homed/public_html/data/"$y ]
   then /bin/mkdir "$homed/public_html/data/"$y
        /bin/chmod a+rx "$homed/public_html/data/"$y
   fi
   if [ ! -d "$homed/public_html/data/"$y"/"$mo ] 
   then /bin/mkdir "$homed/public_html/data/"$y"/"$mo
        /bin/chmod a+rx "$homed/public_html/data/"$y"/"$mo
   fi
   if [ ! -d "$homed/public_html/data/"$y"/"$mo"/"$j ]
   then /bin/mkdir "$homed/public_html/data/"$y"/"$mo"/"$j
        /bin/chmod a+rx "$homed/public_html/data/"$y"/"$mo"/"$j
   fi
   outdir="$homed/public_html/data/"$y"/"$mo"/"$j
   photoname=`/bin/date +%Y-%m-%d`".txt"
   /bin/echo "Output directory: " $outdir
   logname=`/bin/date +%Y-%m-%d`".log"
   /bin/echo "Log file name: " $logname
   if [ ! -f $homed/public_html/data/$logname ] 
   then /bin/echo "" >$homed/public_html/data/$logname
   fi
   /bin/chmod a+rx $homed/public_html/data/$logname
   nligne=`/bin/grep -c " " $homed/public_html/cgi-bin/observation_sequence`
   /bin/echo "Number of line in observation sequence: " $nligne
   begin=`/bin/date +%T" "%Y-%m-%d`
   /bin/echo "=======================================================" >> $homed/public_html/data/$logname
   /bin/echo " Beginning observing run @ " $begin  >> $homed/public_html/data/$logname
   /bin/echo "=======================================================" >> $homed/public_html/data/$logname
   /bin/echo " Basic paramaters values:" >> $homed/public_html/data/$logname
   /bin/echo " Delay to flush CCD ghost image:" $ghosttime "s" >> $homed/public_html/data/$logname
   /bin/echo " Output directory:" $outdir >> $homed/public_html/data/$logname
   /bin/echo " Ephemerides:" >> $homed/public_html/data/$logname
   /usr/local/bin/ephems $DD $MM $SS $dd $mm $ss $NAME >> $homed/public_html/data/$logname
#  line data variable
#  myLine=""
#
#  Loop over each observation line
#
   let n=0
   let nimgtot=nligne
   let cursec=0
   while [ $n -lt  $nligne ] && [ $cursec -lt $finsec ]                      
   do let n=n+1
      /bin/echo "/bin/date +%s" > $homed/public_html/cgi-bin/toto.bash
      cursec=`/bin/bash $homed/public_html/cgi-bin/toto.bash`            # this is the current time in seconds
      curdate=`/bin/date`
      echo "Current date= " $curdate
      echo "Debug: reading line n=" $n "from a total of " $nligne "lines"
      head -$n $homed/public_html/cgi-bin/observation_sequence | tail -1 > $homed/public_html/cgi-bin/ligne.tmp
      read eled elem eles azid azim azis imtyp inttime < $homed/public_html/cgi-bin/ligne.tmp
      let nimg=n
      echo "Azimuth"$azid ":" $azim ":" $azis "Elevation" $eled ":" $elem ":" $eles
      if [ $mval = "on" ]
      then /bin/echo "Moving mount to Azimuth:" $azid":"$azim":"$azis "and Elevation:" $eled":"$elem":"$eles "following" $imtyp
           echo "Mount model = " $mountmodel  
           if [ $mountmodel = "LXD-75" ] 
           then echo "Mount model=" $mountmodel 
#          look tracking.bash
           $homed/public_html/cgi-bin/ligne.tmp >  $homed/public_html/cgi-bin/tracking.tmp
           /usr/local/bin/tracking.bash 
          elif [ $mountmodel = "PT785S+Pololu" ]
#
#              read channels, gain and offset for angle to servo position conversion
#              servo_pos = elev_gain * angle(deg) + elev_offset
#           
          then echo "Mount model inside=" $mountmodel
               grep "elev_gain" $homed/localconfig > $homed/public_html/cgi-bin/ligne.tmp 
               read bidon elev_gain bidon < $homed/public_html/cgi-bin/ligne.tmp  
               grep "elev_offset" $homed/localconfig > $homed/public_html/cgi-bin/ligne.tmp 
               read bidon elev_offset bidon < $homed/public_html/cgi-bin/ligne.tmp  
               grep "azim_gain" $homed/localconfig > $homed/public_html/cgi-bin/ligne.tmp 
               read bidon azim_gain bidon < $homed/public_html/cgi-bin/ligne.tmp  
               grep "azim_offset" $homed/localconfig > $homed/public_html/cgi-bin/ligne.tmp 
               read bidon azim_offset bidon < $homed/public_html/cgi-bin/ligne.tmp  
               grep "elev_channel" $homed/localconfig  > $homed/public_html/cgi-bin/ligne.tmp 
               read bidon elev_channel bidon < $homed/public_html/cgi-bin/ligne.tmp  
               grep "azim_channel" $homed/localconfig  > $homed/public_html/cgi-bin/ligne.tmp 
               read bidon azim_channel bidon < $homed/public_html/cgi-bin/ligne.tmp  
              echo $elev_gain $elev_offset $azim_gain $azim_offset $elev_channel $azim_channel
#
#              goto park position
#
               sel=`/bin/echo "scale=0;180.*"$elev_gain"+"$elev_offset |/usr/bin/bc -l`
               saz=`/bin/echo "scale=0;0.*"$azim_gain"+"$azim_offset |/usr/bin/bc -l`
               servoel=`echo $sel | awk -F\. '{if(($2/10^length($2)) >= .5) printf("%d\n",$1+1);else printf("%d\n",$1)}'`
               servoaz=`echo $saz | awk -F\. '{if(($2/10^length($2)) >= .5) printf("%d\n",$1+1);else printf("%d\n",$1)}'`
               echo "init" $eled $sel $servoel $azid $saz $servoaz
               mono /usr/local/bin/UscCmd --servo $elev_channel","$servoel 
               mono /usr/local/bin/UscCmd --servo $azim_channel","$servoaz
               /bin/sleep $movetime2
#
#              goto observing position
#
               sel=`/bin/echo "scale=0;"$eled"*"$elev_gain"+"$elev_offset |/usr/bin/bc -l`
               saz=`/bin/echo "scale=0;"$azid"*"$azim_gain"+"$azim_offset |/usr/bin/bc -l`
               servoel=`echo $sel | awk -F\. '{if(($2/10^length($2)) >= .5) printf("%d\n",$1+1);else printf("%d\n",$1)}'`
               servoaz=`echo $saz | awk -F\. '{if(($2/10^length($2)) >= .5) printf("%d\n",$1+1);else printf("%d\n",$1)}'`
               echo "posi" $eled $sel $servoel $azid $saz $servoaz 
               mono /usr/local/bin/UscCmd --servo $elev_channel,$servoel 
               mono /usr/local/bin/UscCmd --servo $azim_channel,$servoaz
               /bin/sleep $movetime2
          fi
      fi
#
#     flush ghost image
#
if [ $ival = "sp" ] || [ $ival = "ra" ] ; then
      j=`/bin/date +%d`
      if [  "${j:0:2}" = "00"  ]
      then j=${j:2:1}
      else if  [  "${j:0:1}" = "0" ]
           then j=${j:1:2}
           fi
      fi
      m=`/bin/date +%M`
      if  [  "${m:0:1}" = "0" ]
      then m=${m:1:2}
      fi
      h=`/bin/date +%H`
      if [  "${h:0:1}" = "0" ]
      then h=${h:1:2}
      fi
      let min="$m"+"$h"*60+"$j"*24*60
      read min0 < $homed/public_html/cgi-bin/last_image.tmp
      let dmin=min-min0
      if [ "$dmin" -lt 250 ]
      then /bin/echo "Erasing ghost image (about "$ghosttime "s)"
           /bin/echo " Erasing ghost image" >> $homed/public_html/data/$logname
           /bin/rm -f $homed/public_html/cgi-bin/bidon.fits
           /usr/local/bin/night_exposure -t $ghosttime -pn -s off -b 1 -o $homed/public_html/cgi-bin/bidon.fits
           /bin/rm -f $homed/public_html/cgi-bin/bidon.fits
      fi
fi
#
#     define image name
#
      noname=`/bin/date +%Y-%m-%d_%H:%M:%S`
      posname="_el"$eled":"$elem":"$eles"_az"$azid":"$azim":"$azis
      name=$imtyp"_T_"$stmp"_t_"$inttime"_"$noname$posname".fits"
      if [ -f $homed/public_html/cgi-bin/$name ]
      then /bin/rm -f $homed/public_html/cgi-bin/$name
      fi
#     entry to log file
      begin=`/bin/date +%T" "%Y-%m-%d`
      /bin/echo "Beginning of acquisition (image " $nimg"/"$nimgtot") @ " $begin
      /bin/echo "Mount to AZ:" $azid "deg" $azim "min" $azis "sec and EL:" $eled "deg" $elem "min" $eles "sec" 
      /bin/echo " ----------------------------------------------" >> $homed/public_html/data/$logname
      /bin/echo "  Beginning of acquisition (data " $nimg"/"$nimgtot")  @ "$begin >> $homed/public_html/data/$logname
      /bin/echo " ----------------------------------------------" >> $homed/public_html/data/$logname
#
      if [ -f $homed/public_html/cgi-bin/webcam-mean ]
      then read lumino < $homed/public_html/cgi-bin/webcam-mean
      else echo "No webcam available or damaged webcam, ignoring luminosity check"
           let lumino=0
      fi
      /bin/echo "Ambient luminosity= " $lumino
      while [ $lumino -gt $darkness ]
      do /bin/echo "Waiting " $delaym " min for darkness... (luminosity level=" $lumino ">"$darkness")"
         read lumino < $homed/public_html/cgi-bin/webcam-mean
         let sleeprem=delay
         while  [ $sleeprem -gt  0 ]
         do let sleephr=sleeprem/60/60
            let sleepmin=(sleeprem-sleephr*60*60)/60
            /bin/echo "Sleeping for " $sleeprem " sec (" $sleephr "h " $sleepmin "m )"
            let sleeprem=sleeprem-60
            /bin/sleep 60
         done
      done
      /bin/echo "    Azimuth: " $azid " deg " $azim " min" $azis " sec" >> $homed/public_html/data/$logname
      /bin/echo "    Elevation: " $eled " deg " $elem " min" $eles " sec" >> $homed/public_html/data/$logname
      /bin/echo "    Integration time: " $inttime "sec">> $homed/public_html/data/$logname
if [ $ival = "sp" ] || [ $ival = "ra" ] ; then
#     take image
      if [ $imtyp = "dark" ]
      then shutter="off"
          /bin/echo "Dark frame acquisition"
          /bin/echo "    Dark frame acquisition" >> $homed/public_html/data/$logname
      else shutter="on"
          /bin/echo "Sky image acquisition"
          /bin/echo "    Sky image acquisition" >> $homed/public_html/data/$logname
      fi
#     get ccd temperature
      ccdt=`/usr/local/bin/night_temperature get -t`
      airt=`/usr/local/bin/night_temperature get -ta`
      ccdp=`/usr/local/bin/night_temperature get -r`
      /bin/echo "    Air temperature: " $airt "C">> $homed/public_html/data/$logname
      /bin/echo "    CCD temperature: " $ccdt "C">> $homed/public_html/data/$logname
      /bin/echo "    Temperature setpoint: " $stmp "C">> $homed/public_html/data/$logname
      /bin/echo "    CCD cooling power: " $ccdp >> $homed/public_html/data/$logname
fi
      /bin/echo "    Ambient relative luminosity: " $lumino >> $homed/public_html/data/$logname
#
#     Spectrometer case
#
      if [ $ival = "sp" ]
#     sand spectrometer
      then /usr/local/bin/night_exposure -t $inttime -pn -s $shutter -b 1 -o $homed/public_html/cgi-bin/$name
      fi
#
#     photometer case
#
      if [ $ival = "ra" ]
#     5 filter wheel radiometer
      then 
         if [ $shutter = "on" ]
         then echo "shutter=" $shutter
              /bin/echo "    Time of observation: " $begin > $homed/public_html/cgi-bin/$noname.phot
              /bin/echo "    Azimuth: " $azid " deg " $azim " min" >> $homed/public_html/cgi-bin/$noname.phot
              /bin/echo "    Elevation: " $eled " deg " $elem " min" >> $homed/public_html/cgi-bin/$noname.phot
              /bin/echo "    Integration time: " $inttime "sec">> $homed/public_html/cgi-bin/$noname.phot
              /bin/echo "    CCD temperature: " $ccdt "C">> $homed/public_html/cgi-bin/$noname.phot
              /bin/echo "    Ambient relative luminosity:" $lumino >> $homed/public_html/cgi-bin/$noname.phot
              /bin/echo "    Taking dark frame"
              /usr/local/bin/night_exposure -t $inttime -pn -s off -b 1 -o $homed/public_html/cgi-bin/dark.fits
#
#             Clear filter
#
              /bin/echo "    Taking Clear image"
              /usr/local/bin/night_filter -f clear
              /usr/local/bin/night_exposure -t $inttime -pn -s on -b 1 -o $homed/public_html/cgi-bin/sky.fits
              nameph=`echo $name | sed 's/sky/Clear-dark/g'`
              /usr/local/bin/imarith $homed/public_html/cgi-bin/sky.fits $homed/public_html/cgi-bin/dark.fits sub $homed/public_html/cgi-bin/$nameph
              /bin/rm -f $homed/public_html/cgi-bin/sky.fits
              /bin/echo "    Filter: Clear" >> $homed/public_html/cgi-bin/$noname.phot
              /usr/local/bin/imstat $homed/public_html/cgi-bin/$nameph >> $homed/public_html/cgi-bin/$noname.phot
#              rm -f $homed/public_html/cgi-bin/$nameph
#
#             DeepSky filter
#
              /bin/echo "    Taking Deepsky image"
              /usr/local/bin/night_filter -f B 
              /usr/local/bin/night_exposure -t $inttime -pn -s on -b 1 -o $homed/public_html/cgi-bin/sky.fits
              nameph=`echo $name | sed 's/sky/DeepSky-dark/g'`
              /usr/local/bin/imarith $homed/public_html/cgi-bin/sky.fits $homed/public_html/cgi-bin/dark.fits sub $homed/public_html/cgi-bin/$nameph
              /bin/rm -f $homed/public_html/cgi-bin/sky.fits
              /bin/echo "    Filter: DeepSky" >> $homed/public_html/cgi-bin/$noname.phot
              /usr/local/bin/imstat $homed/public_html/cgi-bin/$nameph >> $homed/public_html/cgi-bin/$noname.phot
#              rm -f $homed/public_html/cgi-bin/$nameph
#
#             Comet filter
#
              /bin/echo "    Taking Comet image"
              /usr/local/bin/night_filter -f V
              /usr/local/bin/night_exposure -t $inttime -pn -s on -b 1 -o $homed/public_html/cgi-bin/sky.fits
              nameph=`echo $name | sed 's/sky/Comet-dark/g'`
              /usr/local/bin/imarith $homed/public_html/cgi-bin/sky.fits $homed/public_html/cgi-bin/dark.fits sub $homed/public_html/cgi-bin/$nameph
              /bin/rm -f $homed/public_html/cgi-bin/sky.fits
              /bin/echo "    Filter: Comet" >> $homed/public_html/cgi-bin/$noname.phot
              /usr/local/bin/imstat $homed/public_html/cgi-bin/$nameph >> $homed/public_html/cgi-bin/$noname.phot
#              rm -f $homed/public_html/cgi-bin/$nameph
#
#             H alpha filter
#
              /bin/echo "    Taking H alpha image"
              /usr/local/bin/night_filter -f R
              /usr/local/bin/night_exposure -t $inttime -pn -s on -b 1 -o $homed/public_html/cgi-bin/sky.fits
              nameph=`echo $name | sed 's/sky/Halpha-dark/g'`
              /usr/local/bin/imarith $homed/public_html/cgi-bin/sky.fits $homed/public_html/cgi-bin/dark.fits sub $homed/public_html/cgi-bin/$nameph
              /bin/rm -f $homed/public_html/cgi-bin/sky.fits
              /bin/echo "    Filter: Halpha" >> $homed/public_html/cgi-bin/$noname.phot
              /usr/local/bin/imstat $homed/public_html/cgi-bin/$nameph >> $homed/public_html/cgi-bin/$noname.phot
#              rm -f $homed/public_html/cgi-bin/$nameph
#
#             IR filter
#
              /bin/echo "    Taking IR image"
              /usr/local/bin/night_filter -f I
              /usr/local/bin/night_exposure -t $inttime -pn -s on -b 1 -o $homed/public_html/cgi-bin/sky.fits
              nameph=`echo $name | sed 's/sky/IR-dark/g'`
              /usr/local/bin/imarith $homed/public_html/cgi-bin/sky.fits $homed/public_html/cgi-bin/dark.fits sub $homed/public_html/cgi-bin/$nameph
              /bin/rm -f $homed/public_html/cgi-bin/sky.fits
              /bin/echo "    Filter: IR" >> $homed/public_html/cgi-bin/$noname.phot
              /usr/local/bin/imstat $homed/public_html/cgi-bin/$nameph >> $homed/public_html/cgi-bin/$noname.phot
#              rm -f $homed/public_html/cgi-bin/$nameph
              /bin/rm -f $homed/public_html/cgi-bin/dark.fits
         fi
      fi
      if [ $ival = "ph" ]
#     12 narrowband filter wheel photometer
      then echo "reading photometer data"
         bash /usr/local/bin/observe-sqm-servo.bash 
      fi
#
#     entry to log file
#
      end=`/bin/date +%T" "%Y-%m-%d`
      j=`/bin/date +%d`
      if [  "${j:0:2}" = "00"  ]
      then j=${j:2:1}
      else if  [  "${j:0:1}" = "0" ]
           then j=${j:1:2}
           fi
      fi
      m=`/bin/date +%M`
      if  [  "${m:0:1}" = "0" ]
      then m=${m:1:2}
      fi
      h=`/bin/date +%H`
      if  [  "${h:0:1}" = "0" ]
      then h=${h:1:2}
      fi
      let min="$m"+"$h"*60+"$j"*24*60
      /bin/echo "End of acquisition @ " $end
if [ $ival = "sp" ] || [ $ival = "ra" ] ; then
      /bin/echo "Saving file: " $name
      /bin/echo "    File name: " $name >> $homed/public_html/data/$logname
      /bin/echo " -----------------------------------------------" >> $homed/public_html/data/$logname
fi
      /bin/echo "  End of acquisition @ " $end >> $homed/public_html/data/$logname
      /bin/echo " -----------------------------------------------" >> $homed/public_html/data/$logname
      /bin/echo $min > $homed/public_html/cgi-bin/last_image.tmp
   done
   /bin/echo "======================================================" >> $homed/public_html/data/$logname
   /bin/echo " End of observing run  "  >> $homed/public_html/data/$logname
   /bin/echo "======================================================" >> $homed/public_html/data/$logname
if [ $ival = "sp" ] || [ $ival = "ra" ] ; then
#
#  set cooling off
#
   /bin/echo "Shutting down ccd cooling"
   /usr/local/bin/night_temperature set -off
   echo "Waiting 10 min for CCD getting in thermal equilibrium"
   sleep 60
   echo "9 min left"
   sleep 60
   echo "8 min left"
   sleep 60
   echo "7 min left"
   sleep 60
   echo "6 min left"
   sleep 60
   echo "5 min left"
   sleep 60
   echo "4 min left"
   sleep 60
   echo "3 min left"
   sleep 60
   echo "2 min left"
   sleep 60
   echo "Only one min!"
   sleep 60
fi
   /bin/echo "======================================================" 
   /bin/echo " End of observing run "  
   /bin/echo "======================================================" 
if [ $ival = "sp" ] || [ $ival = "ra" ] ; then
   /bin/chmod a+rx $homed/public_html/cgi-bin/*.fits 
   /bin/chmod u+w $homed/public_html/cgi-bin/*.fits
   list=`/bin/ls -1 $homed/public_html/cgi-bin/*.fits`
   /bin/echo "liste des images prises" $list
fi

   if [ -f $outdir"/"$logname ]
   then /bin/cat $homed/public_html/data/$logname >> $outdir"/"$logname
   else /bin/cat $homed/public_html/data/$logname > $outdir"/"$logname
   fi
   /bin/chmod a+rx $outdir"/"$logname
if [ $ival = "sp" ] || [ $ival = "ra" ] ; then
   /bin/mv -f $homed/public_html/cgi-bin/*.fits $outdir
   /bin/mv -f $homed/public_html/cgi-bin/*.phot $outdir
fi
   /bin/mv -f $homed/public_html/cgi-bin/photom.txt $outdir"/"$photoname
   /bin/rm -f $homed/public_html/cgi-bin/skycalc.*
   /bin/rm -f $homed/public_html/cgi-bin/toto.bash
   /bin/rm -f $homed/public_html/cgi-bin/ligne.tmp
   /bin/rm -f $homed/public_html/data/$logname
   /bin/rm -f $homed/public_html/cgi-bin/lastwebcam.jpg
   /bin/rm -f $homed/public_html/cgi-bin/bidon.tmp
#
#  park mount
#
   if [ $mval = "on" ] 
   then if [ $mountmodel = "LXD-75" ]
        then /bin/echo "Parking LXD-75 mount"
             /usr/local/bin/movetoel 90 0 0
             /usr/local/bin/movetoaz 90 0 0
             /bin/echo "Mount parked."
        elif [ $mountmodel = "PT785S+Pololu" ]
        then /bin/echo "Parking PT785S+Pololu mount"
             sel=`/bin/echo "scale=0;180.*"$elev_gain"+"$elev_offset |/usr/bin/bc -l`
             saz=`/bin/echo "scale=0;0.*"$azim_gain"+"$azim_offset |/usr/bin/bc -l`
             servoel=`echo $sel | awk -F\. '{if(($2/10^length($2)) >= .5) printf("%d\n",$1+1);else printf("%d\n",$1)}'`
             servoaz=`echo $saz | awk -F\. '{if(($2/10^length($2)) >= .5) printf("%d\n",$1+1);else printf("%d\n",$1)}'`
             mono /usr/local/bin/UscCmd --servo $elev_channel,$servoel 
             mono /usr/local/bin/UscCmd --servo $azim_channel,$servoaz 
             /bin/sleep $movetime2
             /bin/echo "Mount parked."
        fi
   fi
#
#  analysing data in background
#
   if [ $ival = "sp" ] 
   then if [ "$lval" != "1" ]
        then /usr/local/bin/nathalie  > $outdir/analysis.log &
        fi
   fi
   if [ $ival = "ph" ] 
   then if [ "$lval" != "1" ]
        then cd $outdir
             /usr/local/bin/photom2spectrum.bash $photoname  > $outdir/analysis.log &
        fi
   fi
#
#
   if [ $lval -ne 1 ]
   then /bin/echo "Sleeping 6h before scheduling next run."
        let sleeprem=21600
        while [ $sleeprem -gt  0 ]
        do let sleephr=sleeprem/60/60
           let sleepmin=(sleeprem-sleephr*60*60)/60
           /bin/echo "Sleeping for " $sleeprem " sec (" $sleephr "h " $sleepmin "m )"
           let sleeprem=sleeprem-60
           /bin/sleep 60
        done
   fi
done
